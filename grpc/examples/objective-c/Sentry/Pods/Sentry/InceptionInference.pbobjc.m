// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inception_inference.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "InceptionInference.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - InceptionInferenceRoot

@implementation InceptionInferenceRoot

@end

#pragma mark - InceptionInferenceRoot_FileDescriptor

static GPBFileDescriptor *InceptionInferenceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow.serving"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - InceptionRequest

@implementation InceptionRequest

@dynamic jpegEncoded;
@dynamic patientId;
@dynamic clinicalImpression;
@dynamic additionalFeaturesString;

typedef struct InceptionRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t patientId;
  NSData *jpegEncoded;
  NSString *clinicalImpression;
  NSString *additionalFeaturesString;
} InceptionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jpegEncoded",
        .number = InceptionRequest_FieldNumber_JpegEncoded,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(InceptionRequest__storage_, jpegEncoded),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "patientId",
        .number = InceptionRequest_FieldNumber_PatientId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(InceptionRequest__storage_, patientId),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "clinicalImpression",
        .number = InceptionRequest_FieldNumber_ClinicalImpression,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(InceptionRequest__storage_, clinicalImpression),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "additionalFeaturesString",
        .number = InceptionRequest_FieldNumber_AdditionalFeaturesString,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(InceptionRequest__storage_, additionalFeaturesString),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InceptionRequest class]
                                     rootClass:[InceptionInferenceRoot class]
                                          file:InceptionInferenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(InceptionRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InceptionResponse

@implementation InceptionResponse

@dynamic classesArray, classesArray_Count;
@dynamic scoresArray, scoresArray_Count;

typedef struct InceptionResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *classesArray;
  GPBFloatArray *scoresArray;
} InceptionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "classesArray",
        .number = InceptionResponse_FieldNumber_ClassesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(InceptionResponse__storage_, classesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "scoresArray",
        .number = InceptionResponse_FieldNumber_ScoresArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(InceptionResponse__storage_, scoresArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InceptionResponse class]
                                     rootClass:[InceptionInferenceRoot class]
                                          file:InceptionInferenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(InceptionResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
